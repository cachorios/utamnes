<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PeriodoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PeriodoRepository extends EntityRepository
{

    public function getPeriodoActivo($empleador_id)
    {
//        $this->_em->createQuery()
    }

    /**
     * getMaxNumeroLiq
     * Obtiene la liquidacion maxima para un periodo determinado
     * @param Empleador $emp
     * @param $periodo
     * @return int/mixed
     */
    public function getLiquidaciones(Empleador $emp, $periodo)
    {
//        $liqarray = array();
        $q = $this->_em->createQuery(
            "
            Select p.liquidacion, max(p.tipo) as tipo
            From AppBundle:Periodo p
            where p.empleador = :empleador AND p.vencimiento = :periodo
            GROUP BY p.liquidacion
            order BY p.liquidacion DESC, p.tipo DESC
             "
        )
            ->setParameter("empleador", $emp->getId())
            ->setParameter("periodo", $periodo);

        $liqarray = $q->getArrayResult();

        //saco un numero mas de liquidacion
        if (count($liqarray) == 0) {
            $liqarray[] = array('liquidacion' => 0, 'tipo' => 0);
        } else {
            $liqmas = ($liqarray [0]['liquidacion']) + 1;
//            ld($liqmas);

            $permas = ($liqarray [0]['tipo']) + 1;
//            ld($permas);


            $liqarray[] = array('liquidacion' => $liqmas, 'tipo' => 0);

            usort($liqarray, array($this, 'misort'));
//            ld($liqarray);
        }

        return $liqarray;
    }


    public function getRectificarLiquidacion(Empleador $emp, $periodo)
    {
//        $liqarray = array();
        $q = $this->_em->createQuery(
            "
            Select p.liquidacion, max(p.tipo) as tipo, p.descripcion
            From AppBundle:Periodo p
            where p.empleador = :empleador AND p.vencimiento = :periodo AND p.fecha_presentacion IS NOT NULL
            GROUP BY p.liquidacion
            order BY p.liquidacion DESC, p.tipo DESC
             "
        )
            ->setParameter("empleador", $emp->getId())
            ->setParameter("periodo", $periodo);

        $liqarray = $q->getArrayResult();

        return $liqarray;
    }

    public function getDescripcionLiquidacion(Empleador $emp, $periodo, $liquidacion)
    {
        $q = $this->_em->createQuery(
            "
            Select p.liquidacion, max(p.tipo) as tipo, p.descripcion
            From AppBundle:Periodo p
            where p.empleador = :empleador AND p.vencimiento = :periodo AND p.liquidacion = :liquidacion
            GROUP BY p.liquidacion
            order BY p.liquidacion DESC, p.tipo DESC
             "
        )
            ->setParameter("empleador", $emp->getId())
            ->setParameter("periodo", $periodo)
            ->setParameter("liquidacion", $liquidacion);

        $descarray = $q->getArrayResult();

//        ld($descarray);

        return count($descarray) > 0 ? $descarray[0] : array();


    }

    public function getUltimoTipo(Empleador $emp, $periodo, $liquidacion)
    {
        $q = $this->_em->createQuery(
            "
            Select p
            From AppBundle:Periodo p
            where p.empleador = :empleador AND p.vencimiento = :periodo AND p.liquidacion = :liquidacion
            order BY p.liquidacion DESC, p.tipo DESC
             "
        )
            ->setParameter("empleador", $emp->getId())
            ->setParameter("periodo", $periodo)
            ->setParameter("liquidacion", $liquidacion);

        $periodos = $q->execute();

//        ld($descarray);

        return count($periodos) > 0 ? $periodos[0] : array();


    }

    public function misort($a, $b)
    {
        return $a['liquidacion'] <= $b['liquidacion'] ? -1 : 1;
    }
}
